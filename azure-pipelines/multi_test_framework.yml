trigger:
  - master

variables:
  package.manager: "mamba"
  build.dir: $(Agent.BuildDirectory)
  carsus.db.url: "https://github.com/tardis-sn/carsus-db.git"
  carsus.refdata.url: "https://github.com/tardis-sn/carsus-refdata.git"
  chianti.data.url: "https://download.chiantidatabase.org/CHIANTI_v9.0.1_database.tar.gz"
  xuvtop: "$(build.dir)/chianti"
  codecov.token: "bd02b09d-d24f-45a3-8c0b-25eec64a29e7"
  system.debug: "false"

jobs:
  - job: "Test"
    pool:
      vmImage: "ubuntu-latest"

    strategy:
      matrix:
        simple:
          SETUP_CMD: ""
          TEST_MODE: "simple"

        remote_data:
          SETUP_CMD: "--remote-data"
          TEST_MODE: "remote_data"

        runslow:
          SETUP_CMD: "--runslow"
          TEST_MODE: "runslow"

        database:
          SETUP_CMD: "--test-db=$BUILD_DIR/carsus-db/test_databases/test.db"
          TEST_MODE: "database"

        refdata:
          SETUP_CMD: "--refdata=$BUILD_DIR/carsus-refdata"
          TEST_MODE: "refdata"

        coverage:
          SETUP_CMD: "--remote-data --runslow --test-db=$BUILD_DIR/carsus-db/test_databases/test.db --refdata=$BUILD_DIR/carsus-refdata --cov=carsus --cov-report=xml --cov-report=html"
          TEST_MODE: "coverage"

      maxParallel: 6

    steps:
      - bash: echo "##vso[task.setvariable variable=shellopts]errexit"
        displayName: "Force exit on error (bash)"

      - bash: echo "##vso[task.prependpath]$CONDA/bin"
        displayName: "Add conda to PATH"

      - bash: conda install mamba -c conda-forge -y
        displayName: "Install Mamba package manager"
        condition: eq(variables['package.manager'], 'mamba')

      - bash: $PACKAGE_MANAGER env create -f carsus_env3.yml
        displayName: "Install Carsus environment"

      - bash: |
          mkdir -p $XUVTOP
          wget $CHIANTI_DATA_URL -O $XUVTOP/CHIANTI_9.0.1_data.tar.gz
          tar -zxvf $XUVTOP/CHIANTI_9.0.1_data.tar.gz -C $XUVTOP
        displayName: "Fetch Chianti database"

      - bash: |
          source activate carsus
          GIT_LFS_SKIP_SMUDGE=1 git clone $CARSUS_DB_URL $BUILD_DIR/carsus-db
          cd $BUILD_DIR/carsus-db
          git lfs pull --include="test_databases/test.db"
        displayName: "Fetch testing database"
        condition: or(eq(variables['TEST_MODE'], 'database'), eq(variables['TEST_MODE'], 'coverage'))

      - bash: |
          source activate carsus
          git clone $CARSUS_REFDATA_URL $BUILD_DIR/carsus-refdata
        displayName: "Fetch reference data"
        condition: or(eq(variables['TEST_MODE'], 'refdata'), eq(variables['TEST_MODE'], 'coverage'))

      - bash: |
          source activate carsus
          pytest carsus $SETUP_CMD
        displayName: "Carsus test"
        condition: ne(variables['TEST_MODE'], 'coverage')

      - bash: |
          source activate carsus
          pip install pytest-azurepipelines
          pytest carsus $SETUP_CMD
        displayName: "Carsus test (with coverage)"
        condition: eq(variables['TEST_MODE'], 'coverage')

      - bash: |
          bash <(curl -s https://codecov.io/bash)
        displayName: "Upload to codecov.io"
        condition: eq(variables['TEST_MODE'], 'coverage')
